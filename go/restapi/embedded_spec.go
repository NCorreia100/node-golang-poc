// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Connect nodejs with go server via websockets",
    "title": "node-go POC",
    "version": "1.0"
  },
  "host": "localhost:2000",
  "basePath": "/v1",
  "paths": {
    "/users": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Returns a list of users.",
        "operationId": "getUsers",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "404": {
            "description": "List is empty",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Stores a user",
        "operationId": "saveUser",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/RequirementsError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "NotFoundError": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "RequirementsError": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "User": {
      "required": [
        "name",
        "age"
      ],
      "properties": {
        "age": {
          "type": "integer"
        },
        "id": {
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "minLength": 10
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Connect nodejs with go server via websockets",
    "title": "node-go POC",
    "version": "1.0"
  },
  "host": "localhost:2000",
  "basePath": "/v1",
  "paths": {
    "/users": {
      "get": {
        "produces": [
          "application/json"
        ],
        "summary": "Returns a list of users.",
        "operationId": "getUsers",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "404": {
            "description": "List is empty",
            "schema": {
              "$ref": "#/definitions/NotFoundError"
            }
          }
        }
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "summary": "Stores a user",
        "operationId": "saveUser",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "412": {
            "description": "Precondition failed",
            "schema": {
              "$ref": "#/definitions/RequirementsError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "NotFoundError": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "RequirementsError": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "User": {
      "required": [
        "name",
        "age"
      ],
      "properties": {
        "age": {
          "type": "integer"
        },
        "id": {
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "minLength": 10
        }
      }
    }
  }
}`))
}
