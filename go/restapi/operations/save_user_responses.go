// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"node-go-poc/go/models"
)

// SaveUserCreatedCode is the HTTP code returned for type SaveUserCreated
const SaveUserCreatedCode int = 201

/*SaveUserCreated Created

swagger:response saveUserCreated
*/
type SaveUserCreated struct {

	/*
	  In: Body
	*/
	Payload *models.User `json:"body,omitempty"`
}

// NewSaveUserCreated creates SaveUserCreated with default headers values
func NewSaveUserCreated() *SaveUserCreated {

	return &SaveUserCreated{}
}

// WithPayload adds the payload to the save user created response
func (o *SaveUserCreated) WithPayload(payload *models.User) *SaveUserCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the save user created response
func (o *SaveUserCreated) SetPayload(payload *models.User) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SaveUserCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// SaveUserPreconditionFailedCode is the HTTP code returned for type SaveUserPreconditionFailed
const SaveUserPreconditionFailedCode int = 412

/*SaveUserPreconditionFailed Precondition failed

swagger:response saveUserPreconditionFailed
*/
type SaveUserPreconditionFailed struct {

	/*
	  In: Body
	*/
	Payload *models.RequirementsError `json:"body,omitempty"`
}

// NewSaveUserPreconditionFailed creates SaveUserPreconditionFailed with default headers values
func NewSaveUserPreconditionFailed() *SaveUserPreconditionFailed {

	return &SaveUserPreconditionFailed{}
}

// WithPayload adds the payload to the save user precondition failed response
func (o *SaveUserPreconditionFailed) WithPayload(payload *models.RequirementsError) *SaveUserPreconditionFailed {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the save user precondition failed response
func (o *SaveUserPreconditionFailed) SetPayload(payload *models.RequirementsError) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SaveUserPreconditionFailed) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(412)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
